"use strict";var ApplicationConfiguration=function(){var applicationModuleName="pictorious",applicationModuleVendorDependencies=["ngResource","ngCookies","ngAnimate","ngTouch","ngSanitize","ui.router","ui.bootstrap","ui.utils","angularFileUpload","ngTagsInput"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider",function($locationProvider){$locationProvider.hashPrefix("!")}]),angular.element(document).ready(function(){"#_=_"===window.location.hash&&(window.location.hash="#!"),angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("pictures"),ApplicationConfiguration.registerModule("users"),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/"),$stateProvider.state("home",{url:"/",templateUrl:"modules/core/views/home.client.view.html"})}]),angular.module("core").controller("HeaderController",["$scope","Authentication","Menus",function($scope,Authentication,Menus){$scope.authentication=Authentication,$scope.isCollapsed=!1,$scope.menu=Menus.getMenu("topbar"),$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1})}]),angular.module("core").controller("HomeController",["$scope","$http","$location","Authentication","Pictures",function($scope,$http,$location,Authentication,Pictures){$scope.authentication=Authentication,$scope.upvoteDisable=!1,$scope.downvoteDisable=!1,$scope.loadTags=function(query){return $http({url:"/pictureTags",method:"GET",params:query})},$scope.find=function(){$scope.pictures=Pictures.query()},$scope.findTagPictures=function(){if($scope.tags.length<1)$http({url:"/pictures",method:"GET"}).success(function(data){$scope.pictures=data});else{var tag=$scope.tags[0].tag;$http({url:"/pictures/tag/"+tag,method:"GET",params:tag}).success(function(data){$scope.pictures=data})}},$scope.upvote=function(id){if($scope.tags.length){{$scope.tags[0].tag}$http({url:"/pictures/"+id+"/upvote",method:"PUT",data:$scope.picture}).success(function(){var tag=$scope.tags[0].tag;$http({url:"/pictures/tag/"+tag,method:"GET",params:tag}).success(function(data){$scope.pictures=data})})}else $http({url:"/pictures/"+id+"/upvote",method:"PUT",data:$scope.picture}).success(function(data){$scope.pictures=data})},$scope.downvote=function(id){if($scope.tags.length){{$scope.tags[0].tag}$http({url:"/pictures/"+id+"/downvote",method:"PUT",data:$scope.picture}).success(function(){var tag=$scope.tags[0].tag;$http({url:"/pictures/tag/"+tag,method:"GET",params:tag}).success(function(data){$scope.pictures=data})})}else $http({url:"/pictures/"+id+"/downvote",method:"PUT",data:$scope.picture}).success(function(data){$scope.pictures=data})},$scope.voteDisable=function(vote,user){var i=null;for(i=0;vote.length>i;i++)if(vote[i].user===user._id)return!0;return!1},$scope.voteClass=function(vote,user){var i=null;for(i=0;vote.length>i;i++)if(vote[i].user===user._id)return"btn-primary";return""}}]),angular.module("core").service("Menus",[function(){this.defaultRoles=["*"],this.menus={};var shouldRender=function(user){if(!user)return this.isPublic;if(~this.roles.indexOf("*"))return!0;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exists")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,isPublic,roles){return this.menus[menuId]={isPublic:isPublic||!1,roles:roles||this.defaultRoles,items:[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,menuItemTitle,menuItemURL,menuItemType,menuItemUIRoute,isPublic,roles,position){return this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:menuItemTitle,link:menuItemURL,menuItemType:menuItemType||"item",menuItemClass:menuItemType,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].roles:roles,position:position||0,items:[],shouldRender:shouldRender}),this.menus[menuId]},this.addSubMenuItem=function(menuId,rootMenuItemURL,menuItemTitle,menuItemURL,menuItemUIRoute,isPublic,roles,position){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===rootMenuItemURL&&this.menus[menuId].items[itemIndex].items.push({title:menuItemTitle,link:menuItemURL,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].items[itemIndex].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].items[itemIndex].roles:roles,position:position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===menuItemURL&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].link===submenuItemURL&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar")}]),angular.module("pictures").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Pictures","pictures","dropdown","/pictures(/create)?"),Menus.addSubMenuItem("topbar","pictures","List Pictures","pictures"),Menus.addSubMenuItem("topbar","pictures","New Picture","pictures/create")}]),angular.module("pictures").config(["$stateProvider",function($stateProvider){$stateProvider.state("listPictures",{url:"/pictures",templateUrl:"modules/pictures/views/list-pictures.client.view.html"}).state("createPicture",{url:"/pictures/create",templateUrl:"modules/pictures/views/create-picture.client.view.html"}).state("viewPicture",{url:"/pictures/:pictureId",templateUrl:"modules/pictures/views/view-picture.client.view.html"}).state("editPicture",{url:"/pictures/:pictureId/edit",templateUrl:"modules/pictures/views/edit-picture.client.view.html"}).state("listTags",{url:"/pictureTags"})}]),angular.module("pictures").controller("PicturesController",["$scope","$stateParams","$http","$location","$upload","$timeout","Authentication","Pictures",function($scope,$stateParams,$http,$location,$upload,$timeout,Authentication,Pictures){$scope.authentication=Authentication,$scope.loadTags=function(query){return $http({url:"/pictureTags",method:"GET",params:query})},$scope.generateThumb=function(file){file&&file.type.indexOf("image")>-1&&$timeout(function(){var fileReader=new FileReader;fileReader.readAsDataURL(file),fileReader.onload=function(e){$timeout(function(){file.dataUrl=e.target.result})}})},$scope.uploadPic=function(files,picName){if(files&&files.length&&$scope.tags.length&&$scope.tags.length<4){var tags=$scope.tags,file=files[0];$upload.upload({url:"/pictures",fields:{picTitle:picName,tags:tags},file:file}).progress(function(evt){parseInt(100*evt.loaded/evt.total)}).success(function(){$location.path("pictures")})}},$scope.remove=function(picture){if(picture){picture.$remove();for(var i in $scope.pictures)$scope.pictures[i]===picture&&$scope.pictures.splice(i,1)}else $scope.picture.$remove(function(){$location.path("pictures")})},$scope.update=function(){var picture=$scope.picture;picture.$update(function(){$location.path("pictures/"+picture._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.pictures=Pictures.query()},$scope.findPicsByUser=function(){$http({url:"/picturesUser",method:"GET"}).success(function(data){$scope.pictures=data})},$scope.findOne=function(){$scope.picture=Pictures.get({pictureId:$stateParams.pictureId})},$scope.upvote=function(id){$http({url:"/pictures/"+id+"/upvoteImg",method:"PUT",data:$scope.picture}).success(function(data){$scope.picture=data})},$scope.downvote=function(id){$http({url:"/pictures/"+id+"/downvoteImg",method:"PUT",data:$scope.picture}).success(function(data){$scope.picture=data})},$scope.voteDisable=function(vote,user){var i=null;for(i=0;vote.length>i;i++)if(vote[i].user===user._id)return!0;return!1},$scope.voteClass=function(vote,user){var i=null;for(i=0;vote.length>i;i++)if(vote[i].user===user._id)return"btn-primary";return""},$scope.postComment=function(id,comment){console.log("COMMENT POST: "+id+" - "+comment),$http({url:"/pictures/"+id+"/comment",method:"PUT",data:comment})}}]),angular.module("pictures").factory("Pictures",["$resource",function($resource){return $resource("pictures/:pictureId",{pictureId:"@_id"},{update:{method:"PUT"}})}]),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:}return $q.reject(rejection)}}}])}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("profile",{url:"/settings/profile",templateUrl:"modules/users/views/settings/edit-profile.client.view.html"}).state("password",{url:"/settings/password",templateUrl:"modules/users/views/settings/change-password.client.view.html"}).state("accounts",{url:"/settings/accounts",templateUrl:"modules/users/views/settings/social-accounts.client.view.html"}).state("signup",{url:"/signup",templateUrl:"modules/users/views/authentication/signup.client.view.html"}).state("signin",{url:"/signin",templateUrl:"modules/users/views/authentication/signin.client.view.html"}).state("forgot",{url:"/password/forgot",templateUrl:"modules/users/views/password/forgot-password.client.view.html"}).state("reset-invalid",{url:"/password/reset/invalid",templateUrl:"modules/users/views/password/reset-password-invalid.client.view.html"}).state("reset-success",{url:"/password/reset/success",templateUrl:"modules/users/views/password/reset-password-success.client.view.html"}).state("reset",{url:"/password/reset/:token",templateUrl:"modules/users/views/password/reset-password.client.view.html"})}]),angular.module("users").controller("AuthenticationController",["$scope","$http","$location","Authentication",function($scope,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.signup=function(){console.log($scope.credentials),$scope.credentials.password===$scope.credentials.passwordCtrl?$http.post("/auth/signup",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message}):$scope.error="Passwords don't match!"},$scope.signin=function(){$http.post("/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication",function($scope,$stateParams,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(){$scope.success=$scope.error=null,$http.post("/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message})},$scope.resetUserPassword=function(){$scope.success=$scope.error=null,$http.post("/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("SettingsController",["$scope","$http","$location","Users","Authentication",function($scope,$http,$location,Users,Authentication){$scope.user=Authentication.user,$scope.user||$location.path("/"),$scope.hasConnectedAdditionalSocialAccounts=function(){for(var i in $scope.user.additionalProvidersData)return!0;return!1},$scope.isConnectedSocialAccount=function(provider){return $scope.user.provider===provider||$scope.user.additionalProvidersData&&$scope.user.additionalProvidersData[provider]},$scope.removeUserSocialAccount=function(provider){$scope.success=$scope.error=null,$http["delete"]("/users/accounts",{params:{provider:provider}}).success(function(response){$scope.success=!0,$scope.user=Authentication.user=response}).error(function(response){$scope.error=response.message})},$scope.updateUserProfile=function(isValid){if(isValid){$scope.success=$scope.error=null;var user=new Users($scope.user);user.$update(function(response){$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})}else $scope.submitted=!0},$scope.changeUserPassword=function(){$scope.success=$scope.error=null,$http.post("/users/password",$scope.passwordDetails).success(function(){$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message})}}]),angular.module("users").factory("Authentication",[function(){var _this=this;return _this._data={user:window.user},_this._data}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("users",{},{update:{method:"PUT"}})}]);